<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Padrino::Rendering::TemplateNotFound at &#x2F;favicon.ico</title>

  <script type="text/javascript">
  //<!--
  function toggle(id) {
    var pre  = document.getElementById("pre-" + id);
    var post = document.getElementById("post-" + id);
    var context = document.getElementById("context-" + id);

    if (pre.style.display == 'block') {
      pre.style.display = 'none';
      post.style.display = 'none';
      context.style.background = "none";
    } else {
      pre.style.display = 'block';
      post.style.display = 'block';
      context.style.background = "#fffed9";
    }
  }

  function toggleBacktrace(){
    var bt = document.getElementById("backtrace");
    var toggler = document.getElementById("expando");

    if (bt.className == 'condensed') {
      bt.className = 'expanded';
      toggler.innerHTML = "(condense)";
    } else {
      bt.className = 'condensed';
      toggler.innerHTML = "(expand)";
    }
  }
  //-->
  </script>

<style type="text/css" media="screen">
  *                   {margin: 0; padding: 0; border: 0; outline: 0;}
  div.clear           {clear: both;}
  body                {background: #EEEEEE; margin: 0; padding: 0;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode',
                       'Garuda';}
  code                {font-family: 'Lucida Console', monospace;
                       font-size: 12px;}
  li                  {height: 18px;}
  ul                  {list-style: none; margin: 0; padding: 0;}
  ol:hover            {cursor: pointer;}
  ol li               {white-space: pre;}
  #explanation        {font-size: 12px; color: #666666;
                       margin: 20px 0 0 100px;}
/* WRAP */
  #wrap               {width: 1000px; background: #FFFFFF; margin: 0 auto;
                       padding: 30px 50px 20px 50px;
                       border-left: 1px solid #DDDDDD;
                       border-right: 1px solid #DDDDDD;}
/* HEADER */
  #header             {margin: 0 auto 25px auto;}
  #header img         {float: left;}
  #header #summary    {float: left; margin: 12px 0 0 20px; width:660px;
                       font-family: 'Lucida Grande', 'Lucida Sans Unicode';}
  h1                  {margin: 0; font-size: 36px; color: #981919;}
  h2                  {margin: 0; font-size: 22px; color: #333333;}
  #header ul          {margin: 0; font-size: 12px; color: #666666;}
  #header ul li strong{color: #444444;}
  #header ul li       {display: inline; padding: 0 10px;}
  #header ul li.first {padding-left: 0;}
  #header ul li.last  {border: 0; padding-right: 0;}
/* BODY */
  #backtrace,
  #get,
  #post,
  #cookies,
  #rack               {width: 980px; margin: 0 auto 10px auto;}
  p#nav               {float: right; font-size: 14px;}
/* BACKTRACE */
  a#expando           {float: left; padding-left: 5px; color: #666666;
                      font-size: 14px; text-decoration: none; cursor: pointer;}
  a#expando:hover     {text-decoration: underline;}
  h3                  {float: left; width: 100px; margin-bottom: 10px;
                       color: #981919; font-size: 14px; font-weight: bold;}
  #nav a              {color: #666666; text-decoration: none; padding: 0 5px;}
  #backtrace li.frame-info {background: #f7f7f7; padding-left: 10px;
                           font-size: 12px; color: #333333;}
  #backtrace ul       {list-style-position: outside; border: 1px solid #E9E9E9;
                       border-bottom: 0;}
  #backtrace ol       {width: 920px; margin-left: 50px;
                       font: 10px 'Lucida Console', monospace; color: #666666;}
  #backtrace ol li    {border: 0; border-left: 1px solid #E9E9E9;
                       padding: 2px 0;}
  #backtrace ol code  {font-size: 10px; color: #555555; padding-left: 5px;}
  #backtrace-ul li    {border-bottom: 1px solid #E9E9E9; height: auto;
                       padding: 3px 0;}
  #backtrace-ul .code {padding: 6px 0 4px 0;}
  #backtrace.condensed .system,
  #backtrace.condensed .framework {display:none;}
/* REQUEST DATA */
  p.no-data           {padding-top: 2px; font-size: 12px; color: #666666;}
  table.req           {width: 980px; text-align: left; font-size: 12px;
                       color: #666666; padding: 0; border-spacing: 0;
                       border: 1px solid #EEEEEE; border-bottom: 0;
                       border-left: 0;
                       clear:both}
  table.req tr th     {padding: 2px 10px; font-weight: bold;
                       background: #F7F7F7; border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
  table.req tr td     {padding: 2px 20px 2px 10px;
                       border-bottom: 1px solid #EEEEEE;
                       border-left: 1px solid #EEEEEE;}
/* HIDE PRE/POST CODE AT START */
  .pre-context,
  .post-context       {display: none;}

  table td.code       {width:750px}
  table td.code div   {width:750px;overflow:hidden}
</style>
</head>
<body>
  <div id="wrap">
    <div id="header">
      <img src="/__sinatra__/500.png" alt="application error" height="161" width="313" />
      <div id="summary">
        <h1><strong>Padrino::Rendering::TemplateNotFound</strong> at <strong>&#x2F;favicon.ico
          </strong></h1>
        <h2>Template &#x27;&#x2F;favicon&#x27; not found in &#x27;&#x2F;app&#x2F;views&#x27;!</h2>
        <ul>
          <li class="first"><strong>file:</strong> <code>
            rendering.rb</code></li>
          <li><strong>location:</strong> <code>resolve_template
            </code></li>
          <li class="last"><strong>line:
            </strong> 215</li>
        </ul>
      </div>
      <div class="clear"></div>
    </div>

    <div id="backtrace" class='condensed'>
      <h3>BACKTRACE</h3>
      <p><a href="#" id="expando"
            onclick="toggleBacktrace(); return false">(expand)</a></p>
      <p id="nav"><strong>JUMP TO:</strong>
         <a href="#get-info">GET</a>
         <a href="#post-info">POST</a>
         <a href="#cookie-info">COOKIES</a>
         <a href="#env-info">ENV</a>
      </p>
      <div class="clear"></div>

      <ul id="backtrace-ul">

      
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;padrino-core-0.10.1&#x2F;lib&#x2F;padrino-core&#x2F;application&#x2F;rendering.rb</code> in
                <code><strong>resolve_template</strong></code>
            </li>

            <li class="code system">
              
              <ol start="208"
                  class="pre-context" id="pre-1"
                  onclick="toggle(1);">
                
                <li class="pre-context-line"><code>            templates.find { |file, e| file.to_s == &quot;#{template_path}.#{locale}.#{content_type}&quot; } ||
</code></li>
                
                <li class="pre-context-line"><code>            templates.find { |file, e| file.to_s == &quot;#{template_path}.#{locale}&quot; &amp;&amp; simple_content_type } ||
</code></li>
                
                <li class="pre-context-line"><code>            templates.find { |file, e| File.extname(file.to_s) == &quot;.#{target_extension}&quot; or e.to_s == target_extension.to_s } ||
</code></li>
                
                <li class="pre-context-line"><code>            templates.find { |file, e| file.to_s == &quot;#{template_path}.#{content_type}&quot; } ||
</code></li>
                
                <li class="pre-context-line"><code>            templates.find { |file, e| file.to_s == &quot;#{template_path}&quot; &amp;&amp; simple_content_type } ||
</code></li>
                
                <li class="pre-context-line"><code>            (!options[:strict_format] &amp;&amp; templates.first) # If not strict, fall back to the first located template
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="215" class="context" id="1"
                  onclick="toggle(1);">
                <li class="context-line" id="context-1"><code>          raise TemplateNotFound, &quot;Template &#x27;#{template_path}&#x27; not found in &#x27;#{view_path}&#x27;!&quot;  if !located_template &amp;&amp; options[:raise_exceptions]</code></li>
              </ol>

              
              <ol start="216" class="post-context"
                  id="post-1" onclick="toggle(1);">
                
                <li class="post-context-line"><code>          settings.cache_template_file!(located_template, rendering_options) unless settings.reload_templates?
</code></li>
                
                <li class="post-context-line"><code>          located_template
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        ##
</code></li>
                
                <li class="post-context-line"><code>        # Return the I18n.locale if I18n is defined
</code></li>
                
                <li class="post-context-line"><code>        #
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;padrino-core-0.10.1&#x2F;lib&#x2F;padrino-core&#x2F;application&#x2F;rendering.rb</code> in
                <code><strong>render</strong></code>
            </li>

            <li class="code system">
              
              <ol start="117"
                  class="pre-context" id="pre-2"
                  onclick="toggle(2);">
                
                <li class="pre-context-line"><code>          # Data is a hash of options when no engine isn&#x27;t explicit
</code></li>
                
                <li class="pre-context-line"><code>          # render &quot;index&quot;, { :layout =&gt; true }, { :localvar =&gt; &quot;foo&quot; }
</code></li>
                
                <li class="pre-context-line"><code>          # Data is options, and options is locals in this case
</code></li>
                
                <li class="pre-context-line"><code>          data, options, locals = nil, data, options if data.is_a?(Hash)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>          # If data is unassigned then this is a likely a template to be resolved
</code></li>
                
                <li class="pre-context-line"><code>          # This means that no engine was explicitly defined
</code></li>
                
              </ol>
              

              <ol start="124" class="context" id="2"
                  onclick="toggle(2);">
                <li class="context-line" id="context-2"><code>          data, engine = *resolve_template(engine, options) if data.nil?</code></li>
              </ol>

              
              <ol start="125" class="post-context"
                  id="post-2" onclick="toggle(2);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # Setup root
</code></li>
                
                <li class="post-context-line"><code>          root = settings.respond_to?(:root) ? settings.root : &quot;&quot;
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>          # Use @layout if it exists
</code></li>
                
                <li class="post-context-line"><code>          options[:layout] = @layout if options[:layout].nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info app">
              <code>&#x2F;app&#x2F;lib&#x2F;tammer_saleh.rb</code> in
                <code><strong>block in &lt;class:TammerSaleh&gt;</strong></code>
            </li>

            <li class="code app">
              
              <ol start="63"
                  class="pre-context" id="pre-3"
                  onclick="toggle(3);">
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  get &quot;&#x2F;&quot; do
</code></li>
                
                <li class="pre-context-line"><code>    render_page_with_layout(Page.new(:index))
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  get &quot;&#x2F;*.*&quot; do |name, ext|
</code></li>
                
              </ol>
              

              <ol start="70" class="context" id="3"
                  onclick="toggle(3);">
                <li class="context-line" id="context-3"><code>    render :&quot;#{name}&quot;, :layout =&gt; false</code></li>
              </ol>

              
              <ol start="71" class="post-context"
                  id="post-3" onclick="toggle(3);">
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  helpers do
</code></li>
                
                <li class="post-context-line"><code>    def render_page(page, opts = {})
</code></li>
                
                <li class="post-context-line"><code>      opts[:locals] ||= {}
</code></li>
                
                <li class="post-context-line"><code>      opts[:locals][:meta] = page.meta
</code></li>
                
                <li class="post-context-line"><code>      opts[:locals][:page] = page
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1144"
                  class="pre-context" id="pre-4"
                  onclick="toggle(4);">
                
                <li class="pre-context-line"><code>        define_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = instance_method method_name
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile(path)
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>        remove_method method_name
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        [ block.arity != 0 ?
</code></li>
                
              </ol>
              

              <ol start="1151" class="context" id="4"
                  onclick="toggle(4);">
                <li class="context-line" id="context-4"><code>            proc { unbound_method.bind(self).call(*@block_params) } :</code></li>
              </ol>

              
              <ol start="1152" class="post-context"
                  id="post-4" onclick="toggle(4);">
                
                <li class="post-context-line"><code>            proc { unbound_method.bind(self).call },
</code></li>
                
                <li class="post-context-line"><code>          pattern, keys, conditions ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
                <li class="post-context-line"><code>        keys = []
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to? :to_str
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in compile!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1144"
                  class="pre-context" id="pre-5"
                  onclick="toggle(5);">
                
                <li class="pre-context-line"><code>        define_method(method_name, &amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        unbound_method          = instance_method method_name
</code></li>
                
                <li class="pre-context-line"><code>        pattern, keys           = compile(path)
</code></li>
                
                <li class="pre-context-line"><code>        conditions, @conditions = @conditions, []
</code></li>
                
                <li class="pre-context-line"><code>        remove_method method_name
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        [ block.arity != 0 ?
</code></li>
                
              </ol>
              

              <ol start="1151" class="context" id="5"
                  onclick="toggle(5);">
                <li class="context-line" id="context-5"><code>            proc { unbound_method.bind(self).call(*@block_params) } :</code></li>
              </ol>

              
              <ol start="1152" class="post-context"
                  id="post-5" onclick="toggle(5);">
                
                <li class="post-context-line"><code>            proc { unbound_method.bind(self).call },
</code></li>
                
                <li class="post-context-line"><code>          pattern, keys, conditions ]
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def compile(path)
</code></li>
                
                <li class="post-context-line"><code>        keys = []
</code></li>
                
                <li class="post-context-line"><code>        if path.respond_to? :to_str
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>instance_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="717"
                  class="pre-context" id="pre-6"
                  onclick="toggle(6);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="724" class="context" id="6"
                  onclick="toggle(6);">
                <li class="context-line" id="context-6"><code>      throw :halt, instance_eval(&amp;block)</code></li>
              </ol>

              
              <ol start="725" class="post-context"
                  id="post-6" onclick="toggle(6);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # If the current request matches pattern and conditions, fill params
</code></li>
                
                <li class="post-context-line"><code>    # with keys and call the given block.
</code></li>
                
                <li class="post-context-line"><code>    # Revert params afterwards.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    # Returns pass block.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="717"
                  class="pre-context" id="pre-7"
                  onclick="toggle(7);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      route_eval(&amp;pass_block) if pass_block
</code></li>
                
                <li class="pre-context-line"><code>      route_missing
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run a route block and throw :halt with the result.
</code></li>
                
                <li class="pre-context-line"><code>    def route_eval(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="724" class="context" id="7"
                  onclick="toggle(7);">
                <li class="context-line" id="context-7"><code>      throw :halt, instance_eval(&amp;block)</code></li>
              </ol>

              
              <ol start="725" class="post-context"
                  id="post-7" onclick="toggle(7);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # If the current request matches pattern and conditions, fill params
</code></li>
                
                <li class="post-context-line"><code>    # with keys and call the given block.
</code></li>
                
                <li class="post-context-line"><code>    # Revert params afterwards.
</code></li>
                
                <li class="post-context-line"><code>    #
</code></li>
                
                <li class="post-context-line"><code>    # Returns pass block.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block (2 levels) in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="701"
                  class="pre-context" id="pre-8"
                  onclick="toggle(8);">
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
                <li class="pre-context-line"><code>          pass_block = process_route(pattern, keys, conditions) do
</code></li>
                
              </ol>
              

              <ol start="708" class="context" id="8"
                  onclick="toggle(8);">
                <li class="context-line" id="context-8"><code>            route_eval(&amp;block)</code></li>
              </ol>

              
              <ol start="709" class="post-context"
                  id="post-8" onclick="toggle(8);">
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Run routes defined in superclass.
</code></li>
                
                <li class="post-context-line"><code>      if base.superclass.respond_to?(:routes)
</code></li>
                
                <li class="post-context-line"><code>        return route!(base.superclass, pass_block)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="751"
                  class="pre-context" id="pre-9"
                  onclick="toggle(9);">
                
                <li class="pre-context-line"><code>            {}
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
                <li class="pre-context-line"><code>        @params = @original_params.merge(params)
</code></li>
                
                <li class="pre-context-line"><code>        @block_params = values
</code></li>
                
                <li class="pre-context-line"><code>        catch(:pass) do
</code></li>
                
                <li class="pre-context-line"><code>          conditions.each { |cond|
</code></li>
                
                <li class="pre-context-line"><code>            throw :pass if instance_eval(&amp;cond) == false }
</code></li>
                
              </ol>
              

              <ol start="758" class="context" id="9"
                  onclick="toggle(9);">
                <li class="context-line" id="context-9"><code>          yield</code></li>
              </ol>

              
              <ol start="759" class="post-context"
                  id="post-9" onclick="toggle(9);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = @original_params
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # No matching route was found or all routes passed. The default
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="748"
                  class="pre-context" id="pre-10"
                  onclick="toggle(10);">
                
                <li class="pre-context-line"><code>          elsif values.any?
</code></li>
                
                <li class="pre-context-line"><code>            {&#x27;captures&#x27; =&gt; values}
</code></li>
                
                <li class="pre-context-line"><code>          else
</code></li>
                
                <li class="pre-context-line"><code>            {}
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
                <li class="pre-context-line"><code>        @params = @original_params.merge(params)
</code></li>
                
                <li class="pre-context-line"><code>        @block_params = values
</code></li>
                
              </ol>
              

              <ol start="755" class="context" id="10"
                  onclick="toggle(10);">
                <li class="context-line" id="context-10"><code>        catch(:pass) do</code></li>
              </ol>

              
              <ol start="756" class="post-context"
                  id="post-10" onclick="toggle(10);">
                
                <li class="post-context-line"><code>          conditions.each { |cond|
</code></li>
                
                <li class="post-context-line"><code>            throw :pass if instance_eval(&amp;cond) == false }
</code></li>
                
                <li class="post-context-line"><code>          yield
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = @original_params
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>process_route</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="748"
                  class="pre-context" id="pre-11"
                  onclick="toggle(11);">
                
                <li class="pre-context-line"><code>          elsif values.any?
</code></li>
                
                <li class="pre-context-line"><code>            {&#x27;captures&#x27; =&gt; values}
</code></li>
                
                <li class="pre-context-line"><code>          else
</code></li>
                
                <li class="pre-context-line"><code>            {}
</code></li>
                
                <li class="pre-context-line"><code>          end
</code></li>
                
                <li class="pre-context-line"><code>        @params = @original_params.merge(params)
</code></li>
                
                <li class="pre-context-line"><code>        @block_params = values
</code></li>
                
              </ol>
              

              <ol start="755" class="context" id="11"
                  onclick="toggle(11);">
                <li class="context-line" id="context-11"><code>        catch(:pass) do</code></li>
              </ol>

              
              <ol start="756" class="post-context"
                  id="post-11" onclick="toggle(11);">
                
                <li class="post-context-line"><code>          conditions.each { |cond|
</code></li>
                
                <li class="post-context-line"><code>            throw :pass if instance_eval(&amp;cond) == false }
</code></li>
                
                <li class="post-context-line"><code>          yield
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      @params = @original_params
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="700"
                  class="pre-context" id="pre-12"
                  onclick="toggle(12);">
                
                <li class="pre-context-line"><code>      base.filters[type].each { |block| instance_eval(&amp;block) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
                <li class="pre-context-line"><code>        routes.each do |pattern, keys, conditions, block|
</code></li>
                
              </ol>
              

              <ol start="707" class="context" id="12"
                  onclick="toggle(12);">
                <li class="context-line" id="context-12"><code>          pass_block = process_route(pattern, keys, conditions) do</code></li>
              </ol>

              
              <ol start="708" class="post-context"
                  id="post-12" onclick="toggle(12);">
                
                <li class="post-context-line"><code>            route_eval(&amp;block)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Run routes defined in superclass.
</code></li>
                
                <li class="post-context-line"><code>      if base.superclass.respond_to?(:routes)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>each</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="699"
                  class="pre-context" id="pre-13"
                  onclick="toggle(13);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |block| instance_eval(&amp;block) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="706" class="context" id="13"
                  onclick="toggle(13);">
                <li class="context-line" id="context-13"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="707" class="post-context"
                  id="post-13" onclick="toggle(13);">
                
                <li class="post-context-line"><code>          pass_block = process_route(pattern, keys, conditions) do
</code></li>
                
                <li class="post-context-line"><code>            route_eval(&amp;block)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Run routes defined in superclass.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>route!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="699"
                  class="pre-context" id="pre-14"
                  onclick="toggle(14);">
                
                <li class="pre-context-line"><code>      filter! type, base.superclass if base.superclass.respond_to?(:filters)
</code></li>
                
                <li class="pre-context-line"><code>      base.filters[type].each { |block| instance_eval(&amp;block) }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run routes defined on the class and all superclasses.
</code></li>
                
                <li class="pre-context-line"><code>    def route!(base = settings, pass_block=nil)
</code></li>
                
                <li class="pre-context-line"><code>      if routes = base.routes[@request.request_method]
</code></li>
                
              </ol>
              

              <ol start="706" class="context" id="14"
                  onclick="toggle(14);">
                <li class="context-line" id="context-14"><code>        routes.each do |pattern, keys, conditions, block|</code></li>
              </ol>

              
              <ol start="707" class="post-context"
                  id="post-14" onclick="toggle(14);">
                
                <li class="post-context-line"><code>          pass_block = process_route(pattern, keys, conditions) do
</code></li>
                
                <li class="post-context-line"><code>            route_eval(&amp;block)
</code></li>
                
                <li class="post-context-line"><code>          end
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      # Run routes defined in superclass.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>dispatch!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="836"
                  class="pre-context" id="pre-15"
                  onclick="toggle(15);">
                
                <li class="pre-context-line"><code>      res
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Dispatch a request with error handling.
</code></li>
                
                <li class="pre-context-line"><code>    def dispatch!
</code></li>
                
                <li class="pre-context-line"><code>      static! if settings.static? &amp;&amp; (request.get? || request.head?)
</code></li>
                
                <li class="pre-context-line"><code>      filter! :before
</code></li>
                
              </ol>
              

              <ol start="843" class="context" id="15"
                  onclick="toggle(15);">
                <li class="context-line" id="context-15"><code>      route!</code></li>
              </ol>

              
              <ol start="844" class="post-context"
                  id="post-15" onclick="toggle(15);">
                
                <li class="post-context-line"><code>    rescue NotFound =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      handle_not_found!(boom)
</code></li>
                
                <li class="post-context-line"><code>    rescue ::Exception =&gt; boom
</code></li>
                
                <li class="post-context-line"><code>      handle_exception!(boom)
</code></li>
                
                <li class="post-context-line"><code>    ensure
</code></li>
                
                <li class="post-context-line"><code>      filter! :after unless env[&#x27;sinatra.static_file&#x27;]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="637"
                  class="pre-context" id="pre-16"
                  onclick="toggle(16);">
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@request.route)
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="644" class="context" id="16"
                  onclick="toggle(16);">
                <li class="context-line" id="context-16"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="645" class="post-context"
                  id="post-16" onclick="toggle(16);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) }
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if body.respond_to?(:to_ary) and body.first.respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body.first.content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>instance_eval</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="801"
                  class="pre-context" id="pre-17"
                  onclick="toggle(17);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="808" class="context" id="17"
                  onclick="toggle(17);">
                <li class="context-line" id="context-17"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="809" class="post-context"
                  id="post-17" onclick="toggle(17);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="801"
                  class="pre-context" id="pre-18"
                  onclick="toggle(18);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="808" class="context" id="18"
                  onclick="toggle(18);">
                <li class="context-line" id="context-18"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="809" class="post-context"
                  id="post-18" onclick="toggle(18);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="801"
                  class="pre-context" id="pre-19"
                  onclick="toggle(19);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="808" class="context" id="19"
                  onclick="toggle(19);">
                <li class="context-line" id="context-19"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="809" class="post-context"
                  id="post-19" onclick="toggle(19);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>invoke</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="801"
                  class="pre-context" id="pre-20"
                  onclick="toggle(20);">
                
                <li class="pre-context-line"><code>    # Creates a Hash with indifferent access.
</code></li>
                
                <li class="pre-context-line"><code>    def indifferent_hash
</code></li>
                
                <li class="pre-context-line"><code>      Hash.new {|hash,key| hash[key.to_s] if Symbol === key }
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Run the block with &#x27;throw :halt&#x27; support and apply result to the response.
</code></li>
                
                <li class="pre-context-line"><code>    def invoke(&amp;block)
</code></li>
                
              </ol>
              

              <ol start="808" class="context" id="20"
                  onclick="toggle(20);">
                <li class="context-line" id="context-20"><code>      res = catch(:halt) { instance_eval(&amp;block) }</code></li>
              </ol>

              
              <ol start="809" class="post-context"
                  id="post-20" onclick="toggle(20);">
                
                <li class="post-context-line"><code>      return if res.nil?
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      case
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_str)
</code></li>
                
                <li class="post-context-line"><code>        @response.body = [res]
</code></li>
                
                <li class="post-context-line"><code>      when res.respond_to?(:to_ary)
</code></li>
                
                <li class="post-context-line"><code>        res = res.to_ary
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call!</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="637"
                  class="pre-context" id="pre-21"
                  onclick="toggle(21);">
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>      @params   = indifferent_params(@request.params)
</code></li>
                
                <li class="pre-context-line"><code>      template_cache.clear if settings.reload_templates
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@request.route)
</code></li>
                
                <li class="pre-context-line"><code>      force_encoding(@params)
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @response[&#x27;Content-Type&#x27;] = nil
</code></li>
                
              </ol>
              

              <ol start="644" class="context" id="21"
                  onclick="toggle(21);">
                <li class="context-line" id="context-21"><code>      invoke { dispatch! }</code></li>
              </ol>

              
              <ol start="645" class="post-context"
                  id="post-21" onclick="toggle(21);">
                
                <li class="post-context-line"><code>      invoke { error_block!(response.status) }
</code></li>
                
                <li class="post-context-line"><code>      unless @response[&#x27;Content-Type&#x27;]
</code></li>
                
                <li class="post-context-line"><code>        if body.respond_to?(:to_ary) and body.first.respond_to? :content_type
</code></li>
                
                <li class="post-context-line"><code>          content_type body.first.content_type
</code></li>
                
                <li class="post-context-line"><code>        else
</code></li>
                
                <li class="post-context-line"><code>          content_type :html
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="622"
                  class="pre-context" id="pre-22"
                  onclick="toggle(22);">
                
                <li class="pre-context-line"><code>      @app = app
</code></li>
                
                <li class="pre-context-line"><code>      @template_cache = Tilt::Cache.new
</code></li>
                
                <li class="pre-context-line"><code>      yield self if block_given?
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Rack call interface.
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="629" class="context" id="22"
                  onclick="toggle(22);">
                <li class="context-line" id="context-22"><code>      dup.call!(env)</code></li>
              </ol>

              
              <ol start="630" class="post-context"
                  id="post-22" onclick="toggle(22);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    attr_accessor :env, :request, :response, :params
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def call!(env) # :nodoc:
</code></li>
                
                <li class="post-context-line"><code>      @env      = env
</code></li>
                
                <li class="post-context-line"><code>      @request  = Request.new(env)
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;rack-1.3.2&#x2F;lib&#x2F;rack&#x2F;head.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="2"
                  class="pre-context" id="pre-23"
                  onclick="toggle(23);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>class Head
</code></li>
                
                <li class="pre-context-line"><code>  def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>    @app = app
</code></li>
                
                <li class="pre-context-line"><code>  end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>  def call(env)
</code></li>
                
              </ol>
              

              <ol start="9" class="context" id="23"
                  onclick="toggle(23);">
                <li class="context-line" id="context-23"><code>    status, headers, body = @app.call(env)</code></li>
              </ol>

              
              <ol start="10" class="post-context"
                  id="post-23" onclick="toggle(23);">
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    if env[&quot;REQUEST_METHOD&quot;] == &quot;HEAD&quot;
</code></li>
                
                <li class="post-context-line"><code>      [status, headers, []]
</code></li>
                
                <li class="post-context-line"><code>    else
</code></li>
                
                <li class="post-context-line"><code>      [status, headers, body]
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;showexceptions.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="14"
                  class="pre-context" id="pre-24"
                  onclick="toggle(24);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def initialize(app)
</code></li>
                
                <li class="pre-context-line"><code>      @app      = app
</code></li>
                
                <li class="pre-context-line"><code>      @template = ERB.new(TEMPLATE)
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    def call(env)
</code></li>
                
              </ol>
              

              <ol start="21" class="context" id="24"
                  onclick="toggle(24);">
                <li class="context-line" id="context-24"><code>      @app.call(env)</code></li>
              </ol>

              
              <ol start="22" class="post-context"
                  id="post-24" onclick="toggle(24);">
                
                <li class="post-context-line"><code>    rescue Exception =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      errors, env[&quot;rack.errors&quot;] = env[&quot;rack.errors&quot;], @@eats_errors
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      if respond_to?(:prefers_plain_text?) and prefers_plain_text?(env)
</code></li>
                
                <li class="post-context-line"><code>        content_type = &quot;text&#x2F;plain&quot;
</code></li>
                
                <li class="post-context-line"><code>        body = [dump_exception(e)]
</code></li>
                
                <li class="post-context-line"><code>      else
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>block in call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1265"
                  class="pre-context" id="pre-25"
                  onclick="toggle(25);">
                
                <li class="pre-context-line"><code>        setup_sessions builder
</code></li>
                
                <li class="pre-context-line"><code>        middleware.each { |c,a,b| builder.use(c, *a, &amp;b) }
</code></li>
                
                <li class="pre-context-line"><code>        builder.run new!(*args, &amp;bk)
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1272" class="context" id="25"
                  onclick="toggle(25);">
                <li class="context-line" id="context-25"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1273" class="post-context"
                  id="post-25" onclick="toggle(25);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
                <li class="post-context-line"><code>      def setup_sessions(builder)
</code></li>
                
                <li class="post-context-line"><code>        return unless sessions?
</code></li>
                
                <li class="post-context-line"><code>        builder.use Rack::Session::Cookie, :secret =&gt; session_secret
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>synchronize</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1296"
                  class="pre-context" id="pre-26"
                  onclick="toggle(26);">
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      @@mutex = Mutex.new
</code></li>
                
                <li class="pre-context-line"><code>      def synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        if lock?
</code></li>
                
                <li class="pre-context-line"><code>          @@mutex.synchronize(&amp;block)
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
              </ol>
              

              <ol start="1303" class="context" id="26"
                  onclick="toggle(26);">
                <li class="context-line" id="context-26"><code>          yield</code></li>
              </ol>

              
              <ol start="1304" class="post-context"
                  id="post-26" onclick="toggle(26);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>      def metadef(message, &amp;block)
</code></li>
                
                <li class="post-context-line"><code>        (class &lt;&lt; self; self; end).
</code></li>
                
                <li class="post-context-line"><code>          send :define_method, message, &amp;block
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info framework">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;sinatra-1.2.6&#x2F;lib&#x2F;sinatra&#x2F;base.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code framework">
              
              <ol start="1265"
                  class="pre-context" id="pre-27"
                  onclick="toggle(27);">
                
                <li class="pre-context-line"><code>        setup_sessions builder
</code></li>
                
                <li class="pre-context-line"><code>        middleware.each { |c,a,b| builder.use(c, *a, &amp;b) }
</code></li>
                
                <li class="pre-context-line"><code>        builder.run new!(*args, &amp;bk)
</code></li>
                
                <li class="pre-context-line"><code>        builder
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      def call(env)
</code></li>
                
              </ol>
              

              <ol start="1272" class="context" id="27"
                  onclick="toggle(27);">
                <li class="context-line" id="context-27"><code>        synchronize { prototype.call(env) }</code></li>
              </ol>

              
              <ol start="1273" class="post-context"
                  id="post-27" onclick="toggle(27);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    private
</code></li>
                
                <li class="post-context-line"><code>      def setup_sessions(builder)
</code></li>
                
                <li class="post-context-line"><code>        return unless sessions?
</code></li>
                
                <li class="post-context-line"><code>        builder.use Rack::Session::Cookie, :secret =&gt; session_secret
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;rack-1.3.2&#x2F;lib&#x2F;rack&#x2F;static.rb</code> in
                <code><strong>call</strong></code>
            </li>

            <li class="code system">
              
              <ol start="46"
                  class="pre-context" id="pre-28"
                  onclick="toggle(28);">
                
                <li class="pre-context-line"><code>        can_serve = @urls.key? path
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      if can_serve
</code></li>
                
                <li class="pre-context-line"><code>        env[&quot;PATH_INFO&quot;] = @urls[path] if @urls.kind_of? Hash
</code></li>
                
                <li class="pre-context-line"><code>        @file_server.call(env)
</code></li>
                
                <li class="pre-context-line"><code>      else
</code></li>
                
              </ol>
              

              <ol start="53" class="context" id="28"
                  onclick="toggle(28);">
                <li class="context-line" id="context-28"><code>        @app.call(env)</code></li>
              </ol>

              
              <ol start="54" class="post-context"
                  id="post-28" onclick="toggle(28);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>  end
</code></li>
                
                <li class="post-context-line"><code>end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>block in pre_process</strong></code>
            </li>

            <li class="code system">
              
              <ol start="77"
                  class="pre-context" id="pre-29"
                  onclick="toggle(29);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
                <li class="pre-context-line"><code>      catch(:async) do
</code></li>
                
                <li class="pre-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
              </ol>
              

              <ol start="84" class="context" id="29"
                  onclick="toggle(29);">
                <li class="context-line" id="context-29"><code>        response = @app.call(@request.env)</code></li>
              </ol>

              
              <ol start="85" class="post-context"
                  id="post-29" onclick="toggle(29);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception
</code></li>
                
                <li class="post-context-line"><code>      handle_error
</code></li>
                
                <li class="post-context-line"><code>      terminate_request
</code></li>
                
                <li class="post-context-line"><code>      nil # Signal to post_process that the request could not be processed
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>catch</strong></code>
            </li>

            <li class="code system">
              
              <ol start="75"
                  class="pre-context" id="pre-30"
                  onclick="toggle(30);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
              </ol>
              

              <ol start="82" class="context" id="30"
                  onclick="toggle(30);">
                <li class="context-line" id="context-30"><code>      catch(:async) do</code></li>
              </ol>

              
              <ol start="83" class="post-context"
                  id="post-30" onclick="toggle(30);">
                
                <li class="post-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
                <li class="post-context-line"><code>        response = @app.call(@request.env)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception
</code></li>
                
                <li class="post-context-line"><code>      handle_error
</code></li>
                
                <li class="post-context-line"><code>      terminate_request
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>pre_process</strong></code>
            </li>

            <li class="code system">
              
              <ol start="75"
                  class="pre-context" id="pre-31"
                  onclick="toggle(31);">
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>      # When we&#x27;re under a non-async framework like rails, we can still spawn
</code></li>
                
                <li class="pre-context-line"><code>      # off async responses using the callback info, so there&#x27;s little point
</code></li>
                
                <li class="pre-context-line"><code>      # in removing this.
</code></li>
                
                <li class="pre-context-line"><code>      response = AsyncResponse
</code></li>
                
              </ol>
              

              <ol start="82" class="context" id="31"
                  onclick="toggle(31);">
                <li class="context-line" id="context-31"><code>      catch(:async) do</code></li>
              </ol>

              
              <ol start="83" class="post-context"
                  id="post-31" onclick="toggle(31);">
                
                <li class="post-context-line"><code>        # Process the request calling the Rack adapter
</code></li>
                
                <li class="post-context-line"><code>        response = @app.call(@request.env)
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      response
</code></li>
                
                <li class="post-context-line"><code>    rescue Exception
</code></li>
                
                <li class="post-context-line"><code>      handle_error
</code></li>
                
                <li class="post-context-line"><code>      terminate_request
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>process</strong></code>
            </li>

            <li class="code system">
              
              <ol start="50"
                  class="pre-context" id="pre-32"
                  onclick="toggle(32);">
                
                <li class="pre-context-line"><code>    # is ready to be processed.
</code></li>
                
                <li class="pre-context-line"><code>    def process
</code></li>
                
                <li class="pre-context-line"><code>      if threaded?
</code></li>
                
                <li class="pre-context-line"><code>        @request.threaded = true
</code></li>
                
                <li class="pre-context-line"><code>        EventMachine.defer(method(:pre_process), method(:post_process))
</code></li>
                
                <li class="pre-context-line"><code>      else
</code></li>
                
                <li class="pre-context-line"><code>        @request.threaded = false
</code></li>
                
              </ol>
              

              <ol start="57" class="context" id="32"
                  onclick="toggle(32);">
                <li class="context-line" id="context-32"><code>        post_process(pre_process)</code></li>
              </ol>

              
              <ol start="58" class="post-context"
                  id="post-32" onclick="toggle(32);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    def pre_process
</code></li>
                
                <li class="post-context-line"><code>      # Add client info to the request env
</code></li>
                
                <li class="post-context-line"><code>      @request.remote_address = remote_address
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;connection.rb</code> in
                <code><strong>receive_data</strong></code>
            </li>

            <li class="code system">
              
              <ol start="35"
                  class="pre-context" id="pre-33"
                  onclick="toggle(33);">
                
                <li class="pre-context-line"><code>      @request  = Request.new
</code></li>
                
                <li class="pre-context-line"><code>      @response = Response.new
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>    # Called when data is received from the client.
</code></li>
                
                <li class="pre-context-line"><code>    def receive_data(data)
</code></li>
                
                <li class="pre-context-line"><code>      trace { data }
</code></li>
                
              </ol>
              

              <ol start="42" class="context" id="33"
                  onclick="toggle(33);">
                <li class="context-line" id="context-33"><code>      process if @request.parse(data)</code></li>
              </ol>

              
              <ol start="43" class="post-context"
                  id="post-33" onclick="toggle(33);">
                
                <li class="post-context-line"><code>    rescue InvalidRequest =&gt; e
</code></li>
                
                <li class="post-context-line"><code>      log &quot;!! Invalid request&quot;
</code></li>
                
                <li class="post-context-line"><code>      log_error e
</code></li>
                
                <li class="post-context-line"><code>      close_connection
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>    # Called when all data was received and the request
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;eventmachine-0.12.10&#x2F;lib&#x2F;eventmachine.rb</code> in
                <code><strong>run_machine</strong></code>
            </li>

            <li class="code system">
              
              <ol start="249"
                  class="pre-context" id="pre-34"
                  onclick="toggle(34);">
                
                <li class="pre-context-line"><code>        @reactor_running = true
</code></li>
                
                <li class="pre-context-line"><code>        initialize_event_machine
</code></li>
                
                <li class="pre-context-line"><code>        (b = blk || block) and add_timer(0, b)
</code></li>
                
                <li class="pre-context-line"><code>        if @next_tick_queue &amp;&amp; !@next_tick_queue.empty?
</code></li>
                
                <li class="pre-context-line"><code>          add_timer(0) { signal_loopbreak }
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>        @reactor_thread = Thread.current
</code></li>
                
              </ol>
              

              <ol start="256" class="context" id="34"
                  onclick="toggle(34);">
                <li class="context-line" id="context-34"><code>        run_machine</code></li>
              </ol>

              
              <ol start="257" class="post-context"
                  id="post-34" onclick="toggle(34);">
                
                <li class="post-context-line"><code>      ensure
</code></li>
                
                <li class="post-context-line"><code>        until @tails.empty?
</code></li>
                
                <li class="post-context-line"><code>          @tails.pop.call
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        begin
</code></li>
                
                <li class="post-context-line"><code>          release_machine
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;eventmachine-0.12.10&#x2F;lib&#x2F;eventmachine.rb</code> in
                <code><strong>run</strong></code>
            </li>

            <li class="code system">
              
              <ol start="249"
                  class="pre-context" id="pre-35"
                  onclick="toggle(35);">
                
                <li class="pre-context-line"><code>        @reactor_running = true
</code></li>
                
                <li class="pre-context-line"><code>        initialize_event_machine
</code></li>
                
                <li class="pre-context-line"><code>        (b = blk || block) and add_timer(0, b)
</code></li>
                
                <li class="pre-context-line"><code>        if @next_tick_queue &amp;&amp; !@next_tick_queue.empty?
</code></li>
                
                <li class="pre-context-line"><code>          add_timer(0) { signal_loopbreak }
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>        @reactor_thread = Thread.current
</code></li>
                
              </ol>
              

              <ol start="256" class="context" id="35"
                  onclick="toggle(35);">
                <li class="context-line" id="context-35"><code>        run_machine</code></li>
              </ol>

              
              <ol start="257" class="post-context"
                  id="post-35" onclick="toggle(35);">
                
                <li class="post-context-line"><code>      ensure
</code></li>
                
                <li class="post-context-line"><code>        until @tails.empty?
</code></li>
                
                <li class="post-context-line"><code>          @tails.pop.call
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>
</code></li>
                
                <li class="post-context-line"><code>        begin
</code></li>
                
                <li class="post-context-line"><code>          release_machine
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;backends&#x2F;base.rb</code> in
                <code><strong>start</strong></code>
            </li>

            <li class="code system">
              
              <ol start="54"
                  class="pre-context" id="pre-36"
                  onclick="toggle(36);">
                
                <li class="pre-context-line"><code>          @running = true
</code></li>
                
                <li class="pre-context-line"><code>        end
</code></li>
                
                <li class="pre-context-line"><code>        
</code></li>
                
                <li class="pre-context-line"><code>        # Allow for early run up of eventmachine.
</code></li>
                
                <li class="pre-context-line"><code>        if EventMachine.reactor_running?
</code></li>
                
                <li class="pre-context-line"><code>          starter.call
</code></li>
                
                <li class="pre-context-line"><code>        else
</code></li>
                
              </ol>
              

              <ol start="61" class="context" id="36"
                  onclick="toggle(36);">
                <li class="context-line" id="context-36"><code>          EventMachine.run(&amp;starter)</code></li>
              </ol>

              
              <ol start="62" class="post-context"
                  id="post-36" onclick="toggle(36);">
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>      
</code></li>
                
                <li class="post-context-line"><code>      # Stop of the backend from accepting new connections.
</code></li>
                
                <li class="post-context-line"><code>      def stop
</code></li>
                
                <li class="post-context-line"><code>        @running  = false
</code></li>
                
                <li class="post-context-line"><code>        @stopping = true
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;server.rb</code> in
                <code><strong>start</strong></code>
            </li>

            <li class="code system">
              
              <ol start="152"
                  class="pre-context" id="pre-37"
                  onclick="toggle(37);">
                
                <li class="pre-context-line"><code>      log   &quot;&gt;&gt; Thin web server (v#{VERSION::STRING} codename #{VERSION::CODENAME})&quot;
</code></li>
                
                <li class="pre-context-line"><code>      debug &quot;&gt;&gt; Debugging ON&quot;
</code></li>
                
                <li class="pre-context-line"><code>      trace &quot;&gt;&gt; Tracing ON&quot;
</code></li>
                
                <li class="pre-context-line"><code>      
</code></li>
                
                <li class="pre-context-line"><code>      log &quot;&gt;&gt; Maximum connections set to #{@backend.maximum_connections}&quot;
</code></li>
                
                <li class="pre-context-line"><code>      log &quot;&gt;&gt; Listening on #{@backend}, CTRL+C to stop&quot;
</code></li>
                
                <li class="pre-context-line"><code>      
</code></li>
                
              </ol>
              

              <ol start="159" class="context" id="37"
                  onclick="toggle(37);">
                <li class="context-line" id="context-37"><code>      @backend.start</code></li>
              </ol>

              
              <ol start="160" class="post-context"
                  id="post-37" onclick="toggle(37);">
                
                <li class="post-context-line"><code>    end
</code></li>
                
                <li class="post-context-line"><code>    alias :start! :start
</code></li>
                
                <li class="post-context-line"><code>    
</code></li>
                
                <li class="post-context-line"><code>    # == Gracefull shutdown
</code></li>
                
                <li class="post-context-line"><code>    # Stops the server after processing all current connections.
</code></li>
                
                <li class="post-context-line"><code>    # As soon as this method is called, the server stops accepting
</code></li>
                
                <li class="post-context-line"><code>    # new requests and wait for all current connections to finish.
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;controllers&#x2F;controller.rb</code> in
                <code><strong>start</strong></code>
            </li>

            <li class="code system">
              
              <ol start="79"
                  class="pre-context" id="pre-38"
                  onclick="toggle(38);">
                
                <li class="pre-context-line"><code>        # If a stats URL is specified, wrap in Stats adapter
</code></li>
                
                <li class="pre-context-line"><code>        server.app = Stats::Adapter.new(server.app, @options[:stats]) if @options[:stats]
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>        # Register restart procedure which just start another process with same options,
</code></li>
                
                <li class="pre-context-line"><code>        # so that&#x27;s why this is done here.
</code></li>
                
                <li class="pre-context-line"><code>        server.on_restart { Command.run(:start, @options) }
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
              </ol>
              

              <ol start="86" class="context" id="38"
                  onclick="toggle(38);">
                <li class="context-line" id="context-38"><code>        server.start</code></li>
              </ol>

              
              <ol start="87" class="post-context"
                  id="post-38" onclick="toggle(38);">
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    
</code></li>
                
                <li class="post-context-line"><code>      def stop
</code></li>
                
                <li class="post-context-line"><code>        raise OptionRequired, :pid unless @options[:pid]
</code></li>
                
                <li class="post-context-line"><code>      
</code></li>
                
                <li class="post-context-line"><code>        tail_log(@options[:log]) do
</code></li>
                
                <li class="post-context-line"><code>          if Server.kill(@options[:pid], @options[:force] ? 0 : (@options[:timeout] || 60))
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;runner.rb</code> in
                <code><strong>run_command</strong></code>
            </li>

            <li class="code system">
              
              <ol start="178"
                  class="pre-context" id="pre-39"
                  onclick="toggle(39);">
                
                <li class="pre-context-line"><code>      when cluster? then Controllers::Cluster.new(@options)
</code></li>
                
                <li class="pre-context-line"><code>      when service? then Controllers::Service.new(@options)
</code></li>
                
                <li class="pre-context-line"><code>      else               Controllers::Controller.new(@options)
</code></li>
                
                <li class="pre-context-line"><code>      end
</code></li>
                
                <li class="pre-context-line"><code>      
</code></li>
                
                <li class="pre-context-line"><code>      if controller.respond_to?(@command)
</code></li>
                
                <li class="pre-context-line"><code>        begin
</code></li>
                
              </ol>
              

              <ol start="185" class="context" id="39"
                  onclick="toggle(39);">
                <li class="context-line" id="context-39"><code>          controller.send(@command, *@arguments)</code></li>
              </ol>

              
              <ol start="186" class="post-context"
                  id="post-39" onclick="toggle(39);">
                
                <li class="post-context-line"><code>        rescue RunnerError =&gt; e
</code></li>
                
                <li class="post-context-line"><code>          abort e.message
</code></li>
                
                <li class="post-context-line"><code>        end
</code></li>
                
                <li class="post-context-line"><code>      else
</code></li>
                
                <li class="post-context-line"><code>        abort &quot;Invalid options for command: #{@command}&quot;
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
                <li class="post-context-line"><code>    end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;lib&#x2F;thin&#x2F;runner.rb</code> in
                <code><strong>run!</strong></code>
            </li>

            <li class="code system">
              
              <ol start="144"
                  class="pre-context" id="pre-40"
                  onclick="toggle(40);">
                
                <li class="pre-context-line"><code>      @arguments = @argv
</code></li>
                
                <li class="pre-context-line"><code>    end
</code></li>
                
                <li class="pre-context-line"><code>        
</code></li>
                
                <li class="pre-context-line"><code>    # Parse the current shell arguments and run the command.
</code></li>
                
                <li class="pre-context-line"><code>    # Exits on error.
</code></li>
                
                <li class="pre-context-line"><code>    def run!
</code></li>
                
                <li class="pre-context-line"><code>      if self.class.commands.include?(@command)
</code></li>
                
              </ol>
              

              <ol start="151" class="context" id="40"
                  onclick="toggle(40);">
                <li class="context-line" id="context-40"><code>        run_command</code></li>
              </ol>

              
              <ol start="152" class="post-context"
                  id="post-40" onclick="toggle(40);">
                
                <li class="post-context-line"><code>      elsif @command.nil?
</code></li>
                
                <li class="post-context-line"><code>        puts &quot;Command required&quot;
</code></li>
                
                <li class="post-context-line"><code>        puts @parser
</code></li>
                
                <li class="post-context-line"><code>        exit 1  
</code></li>
                
                <li class="post-context-line"><code>      else
</code></li>
                
                <li class="post-context-line"><code>        abort &quot;Unknown command: #{@command}. Use one of #{self.class.commands.join(&#x27;, &#x27;)}&quot;
</code></li>
                
                <li class="post-context-line"><code>      end
</code></li>
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;gems&#x2F;thin-1.2.11&#x2F;bin&#x2F;thin</code> in
                <code><strong>&lt;top (required)&gt;</strong></code>
            </li>

            <li class="code system">
              
              <ol start="1"
                  class="pre-context" id="pre-41"
                  onclick="toggle(41);">
                
                <li class="pre-context-line"><code>#!&#x2F;usr&#x2F;bin&#x2F;env ruby
</code></li>
                
                <li class="pre-context-line"><code># Thin command line interface script.
</code></li>
                
                <li class="pre-context-line"><code># Run &lt;tt&gt;thin -h&lt;&#x2F;tt&gt; to get more usage.
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>require &#x27;thin&#x27;
</code></li>
                
              </ol>
              

              <ol start="6" class="context" id="41"
                  onclick="toggle(41);">
                <li class="context-line" id="context-41"><code>Thin::Runner.new(ARGV).run!</code></li>
              </ol>

              
              <ol start="7" class="post-context"
                  id="post-41" onclick="toggle(41);">
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;bin&#x2F;thin</code> in
                <code><strong>load</strong></code>
            </li>

            <li class="code system">
              
              <ol start="12"
                  class="pre-context" id="pre-42"
                  onclick="toggle(42);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>if ARGV.first =~ &#x2F;^_(.*)_$&#x2F; and Gem::Version.correct? $1 then
</code></li>
                
                <li class="pre-context-line"><code>  version = $1
</code></li>
                
                <li class="pre-context-line"><code>  ARGV.shift
</code></li>
                
                <li class="pre-context-line"><code>end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>gem &#x27;thin&#x27;, version
</code></li>
                
              </ol>
              

              <ol start="19" class="context" id="42"
                  onclick="toggle(42);">
                <li class="context-line" id="context-42"><code>load Gem.bin_path(&#x27;thin&#x27;, &#x27;thin&#x27;, version)</code></li>
              </ol>

              
              <ol start="20" class="post-context"
                  id="post-42" onclick="toggle(42);">
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      
          

            <li class="frame-info system">
              <code>&#x2F;app&#x2F;vendor&#x2F;bundle&#x2F;ruby&#x2F;1.9.1&#x2F;bin&#x2F;thin</code> in
                <code><strong>&lt;main&gt;</strong></code>
            </li>

            <li class="code system">
              
              <ol start="12"
                  class="pre-context" id="pre-43"
                  onclick="toggle(43);">
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>if ARGV.first =~ &#x2F;^_(.*)_$&#x2F; and Gem::Version.correct? $1 then
</code></li>
                
                <li class="pre-context-line"><code>  version = $1
</code></li>
                
                <li class="pre-context-line"><code>  ARGV.shift
</code></li>
                
                <li class="pre-context-line"><code>end
</code></li>
                
                <li class="pre-context-line"><code>
</code></li>
                
                <li class="pre-context-line"><code>gem &#x27;thin&#x27;, version
</code></li>
                
              </ol>
              

              <ol start="19" class="context" id="43"
                  onclick="toggle(43);">
                <li class="context-line" id="context-43"><code>load Gem.bin_path(&#x27;thin&#x27;, &#x27;thin&#x27;, version)</code></li>
              </ol>

              
              <ol start="20" class="post-context"
                  id="post-43" onclick="toggle(43);">
                
              </ol>
              
              <div class="clear"></div>
            </li>

          

        
      

      </ul>
    </div> <!-- /BACKTRACE -->

    <div id="get">
      <h3 id="get-info">GET</h3>
      
        <p class="no-data">No GET data.</p>
      
      <div class="clear"></div>
    </div> <!-- /GET -->

    <div id="post">
      <h3 id="post-info">POST</h3>
      
        <p class="no-data">No POST data.</p>
      
      <div class="clear"></div>
    </div> <!-- /POST -->

    <div id="cookies">
      <h3 id="cookie-info">COOKIES</h3>
      
        <table class="req">
          <tr>
            <th>Variable</th>
            <th>Value</th>
          </tr>
          
            <tr>
              <td>_gauges_cookie</td>
              <td class="code"><div>&quot;1&quot;</div></td>
            </tr>
          
            <tr>
              <td>_gauges_unique_hour</td>
              <td class="code"><div>&quot;1&quot;</div></td>
            </tr>
          
            <tr>
              <td>_gauges_unique_day</td>
              <td class="code"><div>&quot;1&quot;</div></td>
            </tr>
          
            <tr>
              <td>_gauges_unique_month</td>
              <td class="code"><div>&quot;1&quot;</div></td>
            </tr>
          
            <tr>
              <td>_gauges_unique_year</td>
              <td class="code"><div>&quot;1&quot;</div></td>
            </tr>
          
            <tr>
              <td>_gauges_unique</td>
              <td class="code"><div>&quot;1&quot;</div></td>
            </tr>
          
        </table>
      
      <div class="clear"></div>
    </div> <!-- /COOKIES -->

    <div id="rack">
      <h3 id="env-info">Rack ENV</h3>
      <table class="req">
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
         
         <tr>
           <td>GATEWAY_INTERFACE</td>
           <td class="code"><div>CGI&#x2F;1.2</div></td>
         </tr>
         
         <tr>
           <td>HTTP_ACCEPT</td>
           <td class="code"><div>text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q=0.9,*&#x2F;*;q=0.8</div></td>
         </tr>
         
         <tr>
           <td>HTTP_ACCEPT_CHARSET</td>
           <td class="code"><div>ISO-8859-1,utf-8;q=0.7,*;q=0.7</div></td>
         </tr>
         
         <tr>
           <td>HTTP_ACCEPT_ENCODING</td>
           <td class="code"><div>gzip, deflate</div></td>
         </tr>
         
         <tr>
           <td>HTTP_ACCEPT_LANGUAGE</td>
           <td class="code"><div>en-us,en;q=0.5</div></td>
         </tr>
         
         <tr>
           <td>HTTP_CONNECTION</td>
           <td class="code"><div>close</div></td>
         </tr>
         
         <tr>
           <td>HTTP_COOKIE</td>
           <td class="code"><div>_gauges_cookie=1; _gauges_unique_hour=1; _gauges_unique_day=1; _gauges_unique_month=1; _gauges_unique_year=1; _gauges_unique=1</div></td>
         </tr>
         
         <tr>
           <td>HTTP_HOST</td>
           <td class="code"><div>tammersaleh.com</div></td>
         </tr>
         
         <tr>
           <td>HTTP_USER_AGENT</td>
           <td class="code"><div>Mozilla&#x2F;5.0 (X11; Linux i686; rv:7.0.1) Gecko&#x2F;20100101 Firefox&#x2F;7.0.1</div></td>
         </tr>
         
         <tr>
           <td>HTTP_VERSION</td>
           <td class="code"><div>HTTP&#x2F;1.1</div></td>
         </tr>
         
         <tr>
           <td>HTTP_X_FORWARDED_FOR</td>
           <td class="code"><div>81.203.6.235</div></td>
         </tr>
         
         <tr>
           <td>HTTP_X_HEROKU_DYNOS_IN_USE</td>
           <td class="code"><div>1</div></td>
         </tr>
         
         <tr>
           <td>HTTP_X_HEROKU_QUEUE_DEPTH</td>
           <td class="code"><div>0</div></td>
         </tr>
         
         <tr>
           <td>HTTP_X_HEROKU_QUEUE_WAIT_TIME</td>
           <td class="code"><div>1</div></td>
         </tr>
         
         <tr>
           <td>HTTP_X_REAL_IP</td>
           <td class="code"><div>81.203.6.235</div></td>
         </tr>
         
         <tr>
           <td>HTTP_X_REQUEST_START</td>
           <td class="code"><div>1318151026991</div></td>
         </tr>
         
         <tr>
           <td>HTTP_X_VARNISH</td>
           <td class="code"><div>1453083216</div></td>
         </tr>
         
         <tr>
           <td>PATH_INFO</td>
           <td class="code"><div>&#x2F;favicon.ico</div></td>
         </tr>
         
         <tr>
           <td>QUERY_STRING</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>REMOTE_ADDR</td>
           <td class="code"><div>10.94.70.11</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_METHOD</td>
           <td class="code"><div>GET</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_PATH</td>
           <td class="code"><div>&#x2F;favicon.ico</div></td>
         </tr>
         
         <tr>
           <td>REQUEST_URI</td>
           <td class="code"><div>&#x2F;favicon.ico</div></td>
         </tr>
         
         <tr>
           <td>SCRIPT_NAME</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>SERVER_NAME</td>
           <td class="code"><div>tammersaleh.com</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PORT</td>
           <td class="code"><div>80</div></td>
         </tr>
         
         <tr>
           <td>SERVER_PROTOCOL</td>
           <td class="code"><div>HTTP&#x2F;1.1</div></td>
         </tr>
         
         <tr>
           <td>SERVER_SOFTWARE</td>
           <td class="code"><div>thin 1.2.11 codename Bat-Shit Crazy</div></td>
         </tr>
         
         <tr>
           <td>async.callback</td>
           <td class="code"><div>#&lt;Method: Thin::Connection#post_process&gt;</div></td>
         </tr>
         
         <tr>
           <td>async.close</td>
           <td class="code"><div>#&lt;EventMachine::DefaultDeferrable:0x00000002cd5d78&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.errors</td>
           <td class="code"><div>#&lt;Object:0x000000027a4d90&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.input</td>
           <td class="code"><div>#&lt;StringIO:0x00000002cdee28&gt;</div></td>
         </tr>
         
         <tr>
           <td>rack.multiprocess</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.multithread</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.request.cookie_hash</td>
           <td class="code"><div>{&quot;_gauges_cookie&quot;=&gt;&quot;1&quot;, &quot;_gauges_unique_hour&quot;=&gt;&quot;1&quot;, &quot;_gauges_unique_day&quot;=&gt;&quot;1&quot;, &quot;_gauges_unique_month&quot;=&gt;&quot;1&quot;, &quot;_gauges_unique_year&quot;=&gt;&quot;1&quot;, &quot;_gauges_unique&quot;=&gt;&quot;1&quot;}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.cookie_string</td>
           <td class="code"><div>_gauges_cookie=1; _gauges_unique_hour=1; _gauges_unique_day=1; _gauges_unique_month=1; _gauges_unique_year=1; _gauges_unique=1</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_hash</td>
           <td class="code"><div>{}</div></td>
         </tr>
         
         <tr>
           <td>rack.request.query_string</td>
           <td class="code"><div></div></td>
         </tr>
         
         <tr>
           <td>rack.run_once</td>
           <td class="code"><div>false</div></td>
         </tr>
         
         <tr>
           <td>rack.url_scheme</td>
           <td class="code"><div>http</div></td>
         </tr>
         
         <tr>
           <td>rack.version</td>
           <td class="code"><div>[1, 0]</div></td>
         </tr>
         
         <tr>
           <td>sinatra.error</td>
           <td class="code"><div>#&lt;Padrino::Rendering::TemplateNotFound: Template &#x27;&#x2F;favicon&#x27; not found in &#x27;&#x2F;app&#x2F;views&#x27;!&gt;</div></td>
         </tr>
         
      </table>
      <div class="clear"></div>
    </div> <!-- /RACK ENV -->

    <p id="explanation">You're seeing this error because you have
enabled the <code>show_exceptions</code> setting.</p>
  </div> <!-- /WRAP -->
  </body>
</html>
